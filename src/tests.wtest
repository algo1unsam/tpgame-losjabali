import guardia.*
import Jabali.*
import utilidades.*
import tablero.*
import menu.*
import wollok.game.*
import juego.*

describe "Tests del guardia"{
	test "condiciones iniciales del guardia" {
		assert.that(guardia.atrapados().isEmpty())
		assert.equals(guardia.position(),game.center())	
	}
	test "El guardia atrapa un enemigo"{
		const jabali1 = new Jabali()
		game.addVisual(jabali1)
		guardia.atrapaAlEnemigo(jabali1)
		assert.that(guardia.atrapados().contains(jabali1))
	}
}
describe "Tests de los enemigos"{
	test "condiciones iniciales de los enemigos"{
		const jabali1 = new Jabali()
		assert.notThat(jabali1.atrapado())
	}
	test "Resetear posicion debe cambiar la posicion"{
		const jabali1 = new Jabali()
		const posicionInicial = jabali1.position()
		jabali1.resetearPosicion()
		assert.notEquals(posicionInicial,jabali1.position())
		
	}
	test "el jabali se mueve de a 1"{
		const jabali1 = new Jabali()
		const posicionInicial = jabali1.position()
		jabali1.mover()
		assert.that((posicionInicial.x()-jabali1.position().x()).abs()<= 1 and 
				(posicionInicial.y()-jabali1.position().y()).abs()<= 1)	
	}
	test "la rata salta de a 3"{
		const rata1 = new Rata()
		const posicionInicial = rata1.position()
		rata1.saltar()
		assert.that((posicionInicial.x()-rata1.position().x()).abs()<= 3 and 
				(posicionInicial.y()-rata1.position().y()).abs()<= 3)	
	}
	test 'el enemigo esta atrapado'{
		const rata1 = new Rata()
		game.addVisual(rata1)
		guardia.atrapaAlEnemigo(rata1)
		assert.that(rata1.estaAtrapado())

	}
}
describe "tests del juego"{
	test 'Condiciones iniciales del juego'{
		assert.that(juego.niveles().isEmpty())
		assert.equals(juego.nroNivel(),1)
	}
	test 'Un nuevo nivel borra los enemigos atrapados'{
		const rata1 = new Rata()
		game.addVisual(rata1)
		game.addVisual(guardia)
		guardia.atrapaAlEnemigo(rata1)
		juego.iniciarNivel()
		assert.that(guardia.atrapados().isEmpty())
	}
	test 'Pasar de nivel aumenta el numero de nivel'{
		game.addVisual(guardia)
		juego.subirNivel()
		assert.equals(juego.nroNivel(),2)
		}
	test 'terminar el juego resetea el nivel'{
		soundProducer.provider(soundProviderMock)
		juego.terminarJuego()
		assert.equals(juego.nroNivel(),1)
	}
	test 'terminar el juego borra los niveles'{
		soundProducer.provider(soundProviderMock)
		juego.terminarJuego()
		assert.that(juego.niveles().isEmpty())
	}
}
